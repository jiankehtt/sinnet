package com.shl.benz.weixin.utils;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.security.SecureRandom;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.shl.benz.weixin.msg.pojo.AccessToken;
import com.shl.benz.weixin.msg.pojo.Menu;
import com.shl.benz.weixin.msg.pojo.PageAccessToken;
import com.shl.benz.weixin.msg.pojo.UserInfo;

/**
 * 公众平台通用接口工具类
 * @author John
 *
 */
public class WeiXinUtil {
	private static Logger logger = LoggerFactory.getLogger(WeiXinUtil.class);
	
	// 获取access_token的接口地址（GET） 限2000（次/天）
	public final static String access_token_url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET";

    // 菜单创建（POST） 限100（次/天）  
	public static String menu_create_url = "https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN";
	
	//获取网页授权
	public static String page_access_token_url = "https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code";
	
	//获取用户基本信息
	public static String user_info_url = "https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN";
	
	/**
	 * 发起https请求并获取结果
	 * 
	 * @param requestUrl 请求地址
	 * @param requestMethod  请求方法 get、post
	 * @param outputStr	提交的数据
	 * @return 返回JSONObject
	 */
	public static JSONObject httpRequest(String requestUrl, String requestMethod, String outputStr){
		JSONObject jsonObject = null;
		StringBuffer buffer = new StringBuffer();
		logger.info("requestUrl:{}", requestUrl);
		try {
			//创建SSLContext对象，并使用我们指定的信任管理器初始化 
			TrustManager[] tm = {new MyX509TrustManager()};
			SSLContext sslContext = SSLContext.getInstance("SSL", "SunJSSE");
			sslContext.init(null, tm, new SecureRandom());
			// 从上述SSLContext对象中得到SSLSocketFactory对象  
			SSLSocketFactory ssf = sslContext.getSocketFactory();  
			
			URL url = new URL(requestUrl);  

			HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();  
			httpUrlConn.setSSLSocketFactory(ssf);  
			   
			httpUrlConn.setDoOutput(true);  
			httpUrlConn.setDoInput(true);  
			httpUrlConn.setUseCaches(false);  
			// 设置请求方式（GET/POST）  
			httpUrlConn.setRequestMethod(requestMethod);  
			  
			if ("GET".equalsIgnoreCase(requestMethod))  
				httpUrlConn.connect();  
			  
				// 当有数据需要提交时  
				if (null != outputStr) {  
					OutputStream outputStream = httpUrlConn.getOutputStream();  
					// 注意编码格式，防止中文乱码  
					outputStream.write(outputStr.getBytes("UTF-8"));  
					outputStream.close();  
				}  
			  
				// 将返回的输入流转换成字符串  
				InputStream inputStream = httpUrlConn.getInputStream();  
				InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "utf-8");  
				BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  
				  
				String str = null;  
				while ((str = bufferedReader.readLine()) != null) {  
					buffer.append(str);  
				}  
				bufferedReader.close();  
				inputStreamReader.close();  
				// 释放资源  
				inputStream.close();  
				inputStream = null;  
				httpUrlConn.disconnect();  
				jsonObject = JSON.parseObject(buffer.toString());  

		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("https request error:{}", e);
		}
		
		return jsonObject;
	}
	
	/**
	 * 获取用户信息
	 * @param openId
	 * @param pAccessToken
	 * @return
	 */
	public static UserInfo getUserInfo(String code, String appid, String appsecret){
		UserInfo userInfo = null;
		PageAccessToken pAccessToken = null;
		String[] privilegeArr = new String[]{};
		
		try{
			pAccessToken = getPageAccessToken(appid, appsecret, code);
			logger.info("网页授权Access_Token: {}", JSONObject.toJSON(pAccessToken));
			
			String requestUrl = user_info_url.replace("OPENID", pAccessToken.getOpenid()).replace("ACCESS_TOKEN", pAccessToken.getAccessToken());
			JSONObject jsonObj = httpRequest(requestUrl, "GET", null);
			
			if(null != jsonObj){
				userInfo = new UserInfo();
				jsonObj.getJSONArray("privilege").toArray(privilegeArr);
				userInfo.setCity(jsonObj.getString("city"));
				userInfo.setCountry(jsonObj.getString("country"));
				userInfo.setHeadimgUrl(jsonObj.getString("headimgurl"));
				userInfo.setNikeName(jsonObj.getString("nickname"));
				userInfo.setOpenId(jsonObj.getString("openid"));
				userInfo.setPrivilege(privilegeArr);
				userInfo.setProvince(jsonObj.getString("province"));
				userInfo.setSex(jsonObj.getString("sex"));
				userInfo.setUnionId(jsonObj.getString("unionid"));
				logger.info("userInfo: {}", JSONObject.toJSONString(userInfo));
			}else{
				logger.error("获取用户信息失败");
			}
		}catch(Exception e){
			logger.error("获取用户信息失败");
			e.printStackTrace();
		}
		
		return userInfo;
	}
	
	/**
	 * 获取access_token
	 * 
	 * @param appid 凭证
	 * @param appsecret 秘钥
	 * @return
	 */
	public static AccessToken getAccessToken(String appid, String appsecret){
		AccessToken accessToken = null;
		
		String requestUrl = access_token_url.replace("APPID", appid).replace("APPSECRET", appsecret);
		JSONObject jsonObject = httpRequest(requestUrl, "GET", null);
		
		if(null != jsonObject && jsonObject.getString("errcode") == null){
			accessToken = new AccessToken();
			accessToken.setToken(jsonObject.getString("access_token"));
			accessToken.setExpiresIn(jsonObject.getIntValue("expires_in"));
		}else{
			logger.error("获取access_token失败  "+jsonObject);
		}
		return accessToken;
	}
	
	/**
	 * 创建微信公众号菜单
	 * @param menu
	 * @param accessToken
	 * @return
	 */
	public static int createMenu(Menu menu, String accessToken){
		int result = 0;
		
		String url = menu_create_url.replace("ACCESS_TOKEN", accessToken);
		String jsonMenu = JSONObject.toJSONString(menu);
		
		logger.info("菜单json:{}", jsonMenu);
		
		JSONObject jsonObj = httpRequest(url, "POST", jsonMenu);
		
		logger.info("创建菜单返回：{}", jsonObj.toString());
		
		if(null != jsonObj){
			if(0 != jsonObj.getIntValue("errcode")){
				result = jsonObj.getIntValue("errcode");
				logger.error("创建菜单失败 errorcode: {} errMsg: {}", jsonObj.getIntValue("errcode"), jsonObj.getString("errmsg"));
			}
		}
		
		return result;
	}
	
	public static PageAccessToken getPageAccessToken(String appid, String appsecret, String code){
		PageAccessToken pAccessToken = null;
		
		String RequestUrl = page_access_token_url.replace("APPID", appid).replace("SECRET", appsecret).replace("CODE", code);
		JSONObject jsonObj = httpRequest(RequestUrl, "GET", null);
		
		if(null != jsonObj){
			pAccessToken = new PageAccessToken();
			pAccessToken.setAccessToken(jsonObj.getString("access_token"));
			pAccessToken.setExpiresIn(jsonObj.getString("expires_in"));
			pAccessToken.setOpenid(jsonObj.getString("openid"));
			pAccessToken.setScope(jsonObj.getString("scope"));
			pAccessToken.setUinionid(jsonObj.getString("unionid"));
		}else{
			logger.error("获取网页授权access_token失败");
		}
		
		return pAccessToken;
	}
}
