package com.shl.benz.base;



import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.shl.benz.constants.GlobalVars;
import com.shl.benz.constants.LogType;
import com.shl.benz.database.model.OptionLog;
import com.shl.benz.service.OptionLogService;
import com.shl.benz.service.bean.UserManagerInfo;
import com.shl.benz.utils.DateUtils;

@SuppressWarnings("serial")
public class BaseAction extends ActionSupport implements GlobalVars {
	/**
	 * 日志
	 */
	protected Logger logger = Logger.getLogger(getClass());

	/**
	 * 日志service，用于将日志信息保存到数据库
	 */
	@Autowired
	protected OptionLogService logService;
	
	
	private List<MapPair> useList;
	
	protected void initUseList(){
		useList = new ArrayList<MapPair>();
		useList.add(new MapPair(0,"是"));
		useList.add(new MapPair(1,"否"));
	}

	/**
	 * 
	 * 标题: getCurrentUser 描述: 获取当前登录的用户
	 * 
	 * @return
	 */
	protected UserManagerInfo getCurrentUser() {
		return (UserManagerInfo) ActionContext.getContext().getSession().get(USERKEY);
	}

	/**
	 * 
	 * 标题: putJsonFail 描述: 将错误信息写成json格式，输出到response中
	 * 
	 * @param message
	 */
	protected void putJsonFail(String message) {
		String json = String.format(FAILMSG, message);
		putJsonData(json);
	}

	protected void putJsonSuccess() {
		putJsonData(SUCCESS);
	}
	
	protected void putJsonSuccessData(String message) {
		String json = String.format(SUCCESSMSG, message);
		putJsonData(json);
	}

	/**
	 * 输出JSON消息
	 * 
	 * @param json
	 * @param response
	 */
	protected void putJsonData(String json) {
		try {
			ServletActionContext.getResponse().setCharacterEncoding("utf-8");
			PrintWriter pw = ServletActionContext.getResponse().getWriter();
			pw.print(json);
			pw.flush();
		} catch (IOException e) {
			logger.error(e);
		}
	}

	/**
	 * 
	 * 标题: recoredLog 描述: 记录日志
	 * 
	 * @param optype
	 * @param opaction
	 * @param opcontent
	 */
	protected void recoredLog(String optype, String opaction, String opcontent) {
		UserManagerInfo user = getCurrentUser();
		if (opaction == null)
			opaction = "";
		OptionLog log = new OptionLog();
		log.setLogno(UUID.randomUUID().toString());
		if (user != null) {
			log.setUsername(user.getUsername());
			log.setOpip(user.getIp());
		}
		log.setOptime(DateUtils.getCurrentDateString(DateUtils.DATETIME_PATTERN24H));
		// 默认为: 操作员日志
		if (isValid(opaction)) {
			log.setOptype(optype);
		} else {
			log.setOpaction(LogType.SYSTEM_OP);
		}
		log.setOpaction(opaction);
		log.setOpcontent(opcontent);
		log.setOpsource(ServletActionContext.getRequest().getQueryString());

		logService.newLog(log);
	}

	/**
	 * 
	 * 标题: recoredLog 描述: 记录日志
	 * 
	 * @param sp
	 *            账户
	 * @param opaction
	 *            操作
	 */
	protected void recoredLog(UserManagerInfo sp, String opaction) {
		logService.recordLog(sp, opaction);
	}
	
	/**
	 * 
	 * 标题: recoredLog 
	 * 描述: 记录日志 
	 * @param opaction 操作
	 */
	protected void recoredLog(String opaction){
		UserManagerInfo user = (UserManagerInfo)getCurrentUser();
	    if(opaction == null)
	      opaction = "";
	    OptionLog log = new OptionLog();
	    log.setLogno(UUID.randomUUID().toString());
	    log.setUsername(user.getUsername());
	    log.setOptime(DateUtils.getCurrentDateString(DateUtils.DATETIME_PATTERN24H));
	    log.setOptype(LogType.SYSTEM_OP);
	    log.setOpaction(opaction);
	    log.setOpcontent("");
	    log.setOpsource(ServletActionContext.getRequest().getQueryString());
	    log.setOpip(user.getIp());
	    logService.newLog(log);
	}

	/**
	 * 
	 * 标题: isValid 描述: 验证非空
	 * 
	 * @param param
	 * @return 如果验证成功则为true，否则为false
	 */
	protected boolean isValid(String param) {
		if (param == null || "".equals(param))
			return false;
		return true;
	}
	
	public List<MapPair> getUseList() {
		return useList;
	}

	public void setUseList(List<MapPair> useList) {
		this.useList = useList;
	}

	public String getUserName() {
		return getCurrentUser().getUsername();
	}

}
